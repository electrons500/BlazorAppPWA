@page "/Game"
@using BlazorAppPWA.Shared
@using Newtonsoft.Json
@using BlazorAppPWA.Client.Data
@inject HttpClient _client
@inject NavigationManager navigationManager
@inject IJSRuntime js;
@inject localGameStore _localstore;
@inject PushNotification _pushNotification;
@using BlazorAppPWA.Client.SweetAlert;
@using BlazorAppPWA.Client.Enums;



<PageTitle>Games</PageTitle>

<h1>List of Games</h1>
<br />
@if (games == null)
{
    <p><em>Loading...</em></p>
}
else
{
    
    <div class="card shadow">
        <div class="card-header">
            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@onAddGame"><span class="oi oi-plus"></span> Add new game</button>
        </div>
        <div class="card-body">
            <table class="table table-bordered table-striped table-hover table-sm">
                <thead class="table-primary">
                    <tr>
                        <th>#</th>
                        <th>Game </th>
                        <th>Price</th>
                        <th>Creation date</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var game in games)
                    {
                        <tr>
                            <td>@game.Id</td>
                            <td>@game.GameName</td>
                            <td>@game.Price</td>
                            <td>@game.CreatedAt.ToShortDateString()</td>
                            <td>
                                <button type="button" class="btn btn-outline-success btn-sm" @onclick="()=>onEditGameHandler(game.Id)"><span class="oi oi-pencil"></span></button>
                                <button class="btn btn-outline-secondary btn-sm" @onclick="()=>onGetGameDetailsHandler(game.Id)"><span class="oi oi-eye"></span></button>
                                <button class="btn btn-outline-danger btn-sm" @onclick="()=>onDeleteGameHandler(game.Id)"><span class="oi oi-trash"></span></button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>

        </div>
    </div>
   

}



@code {
    private List<Game>? games;
    private SweetAlertBase _sweetAlertBase;

    protected override async Task OnInitializedAsync()
    {
        _sweetAlertBase = new SweetAlertBase(js);

        try
        {
            //check if server is online then start to synchronize
            if (await _localstore.CheckIfServerIsOnline())
            {
                if (await RequestNotificationSubscriptionAsync())
                {
                   await _pushNotification.SendNotificationAsync("You are current Online.");
                }
                
                //Check if there is any outstanding data in operations object store in Indexed db
                if (await _localstore.GetNumberofValuesInObjectStore("operations") is not 0)
                {
                    //synchronize data to server if there are data in object store
                    await _localstore.SynchronizeAsync();
                }

                games = await LoadDataFromServerAsync();
            }

        }
        catch (HttpRequestException reqex)
        {
            //load from indexed db since server is offline
            if (await RequestNotificationSubscriptionAsync())
            {
                await _pushNotification.SendNotificationAsync("You are current Offline.");
            }

            games = await LoadDataFromLocalDbAsync();

        }

    }


    private void onAddGame()
    {
        navigationManager.NavigateTo("/Game/AddGame");

    }

    private void onEditGameHandler(int id)
    {
        navigationManager.NavigateTo($"/Game/EditGame/{id}");
    }

    private void onGetGameDetailsHandler(int id)
    {
        navigationManager.NavigateTo($"/Game/GameDetails/{id}");
    }

    private void onDeleteGameHandler(int id)
    {
        navigationManager.NavigateTo($"/Game/DeleteGame/{id}");
    }

    private async Task<List<Game>> LoadDataFromServerAsync()
    {
        //Get data from online server
        var getFromServer = await _client.GetFromJsonAsync<List<Game>>("api/Games/GetGames");
        if (getFromServer != null)
        {
            //clear all data from object stores
            await _localstore.DeleteAllGameFromlocal("serverdata");
            await _localstore.DeleteAllGameFromlocal("operations");

            //Repopulate object store
            await _localstore.InsertServerDataIntoLocal("serverdata", getFromServer);
            return getFromServer;
        }

        return new List<Game>();

    }

    private async Task<List<Game>> LoadDataFromLocalDbAsync()
    {
        var getdatafromlocal = (await _localstore.GetAllGamesFromlocalDb("serverdata")).ToList();
        if(getdatafromlocal.Count is 0)
        {
            return new List<Game>();
        }
        return getdatafromlocal;
    }

    private async Task<bool> RequestNotificationSubscriptionAsync()
    {
        //Ask user permission to recieve push notifications
        //if user has grant permission or has already granted permission return true
        return await js.InvokeAsync<bool>("BlazorRequestPushNotification.requestPushNotification");
    }


}

